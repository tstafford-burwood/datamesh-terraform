steps:
# RESEARCHER PROJECTS WITH DAGS
- id: "researcher projects - init"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  args: [
    'init',
    '-backend-config=bucket=${_BUCKET}',
    '-backend-config=prefix=${_PREFIX}/researcher-projects'
  ]

# First plan/apply provision only the workspace and bastion projects

- id: "researcher projects - first plan"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  args: [
    'plan',
    '-target=module.researcher-workspace-project',
    '-target=module.researcher-bastion-access-project'
  ]

- id: "researcher projects - first apply"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  args: [
    'apply',
    '-target=module.researcher-workspace-project',
    '-target=module.researcher-bastion-access-project',
    '-auto-approve'
  ]

# Second plan/apply disables two org policies at the project level and then provision everything else

- id: "researcher projects - second plan"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  args: [
    'plan',
    '-var=enforce_researcher_workspace_disable_sa_creation=false',
    '-var=enforce_bastion_project_disable_sa_creation=false'
  ]

# Note: This step will always succeed to ensure that the next step always runs.

- id: "researcher projects - second apply and disable project policies"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    if ! terraform apply -auto-approve -var="enforce_researcher_workspace_disable_sa_creation=false" -var="enforce_bastion_project_disable_sa_creation=false" ; then
      echo "Pipeline has failed, check terraform apply log output to determine error."
    fi

# Third plan/apply re-enables two org policies at the project level

- id: "researcher projects - third plan and ensure project policies are re-enabled"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    terraform plan \
    -target=module.researcher_workspace_disable_sa_creation \
    -target=module.bastion_project_disable_sa_creation \
    -var="enforce_researcher_workspace_disable_sa_creation=true" \
    -var="enforce_bastion_project_disable_sa_creation=true" \

- id: "researcher projects - third apply and ensure project policies are re-enabled"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    terraform apply -auto-approve \
    -target=module.researcher_workspace_disable_sa_creation \
    -target=module.bastion_project_disable_sa_creation \
    -var="enforce_researcher_workspace_disable_sa_creation=true" \
    -var="enforce_bastion_project_disable_sa_creation=true" \

# Create output files to use when performing variable substitution in the Composer DAGs for this workspace

- id: "output file creation - researcher projects"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/researcher-projects'
  entrypoint: /bin/sh
  args: [
    '-c',
    'terraform output -json > /workspace/researcher-output.json && cat /workspace/researcher-output.json'
  ]

- id: "staging project state pull - init"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/staging-project'
  args: [
    'init',
    '-backend-config=bucket=${_BUCKET}',
    '-backend-config=prefix=${_PREFIX}/staging-project'
  ]

- id: "output file creation - staging project"
  name: hashicorp/terraform:${_TAG}
  dir: 'environment/deployments/wcm-srde/staging-project'
  entrypoint: /bin/sh
  args: [
    '-c',
    'terraform output -json > /workspace/staging-output.json && cat /workspace/staging-output.json'
  ]

  # Perform variable substitution in the DAGs and upload all of them to the Composer DAGs folder.

- id: "load variables for Researcher DAG envs"
  name: gcr.io/cloud-builders/gcloud
  dir: 'environment/deployments/wcm-srde/staging-project/cloud-composer/composer-dag-files'
  entrypoint: python
  args: [
    'set_researcher_dag_envs.py'
  ]

- id: "load DAG to GCS bucket"
  name: gcr.io/cloud-builders/gsutil
  dir: 'environment/deployments/wcm-srde/staging-project/cloud-composer/composer-dag-files'
  args: [
    'cp',
    '-n',
    '/workspace/*_DAG.py',
    'gs://${_COMPOSER_DAG_BUCKET}/dags/'
  ]

timeout: 3600s